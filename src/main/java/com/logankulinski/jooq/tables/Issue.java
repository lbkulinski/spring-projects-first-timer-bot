/*
 * This file is generated by jOOQ.
 */
package com.logankulinski.jooq.tables;


import com.logankulinski.jooq.Keys;
import com.logankulinski.jooq.Public;
import com.logankulinski.jooq.tables.records.IssueRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Issue extends TableImpl<IssueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.issue</code>
     */
    public static final Issue ISSUE = new Issue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IssueRecord> getRecordType() {
        return IssueRecord.class;
    }

    /**
     * The column <code>public.issue.id</code>.
     */
    public final TableField<IssueRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.issue.title</code>.
     */
    public final TableField<IssueRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.issue.url</code>.
     */
    public final TableField<IssueRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.issue.notification_date</code>.
     */
    public final TableField<IssueRecord, LocalDateTime> NOTIFICATION_DATE = createField(DSL.name("notification_date"), SQLDataType.LOCALDATETIME(6), this, "");

    private Issue(Name alias, Table<IssueRecord> aliased) {
        this(alias, aliased, null);
    }

    private Issue(Name alias, Table<IssueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.issue</code> table reference
     */
    public Issue(String alias) {
        this(DSL.name(alias), ISSUE);
    }

    /**
     * Create an aliased <code>public.issue</code> table reference
     */
    public Issue(Name alias) {
        this(alias, ISSUE);
    }

    /**
     * Create a <code>public.issue</code> table reference
     */
    public Issue() {
        this(DSL.name("issue"), null);
    }

    public <O extends Record> Issue(Table<O> child, ForeignKey<O, IssueRecord> key) {
        super(child, key, ISSUE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<IssueRecord> getPrimaryKey() {
        return Keys.ISSUE_PKEY;
    }

    @Override
    public Issue as(String alias) {
        return new Issue(DSL.name(alias), this);
    }

    @Override
    public Issue as(Name alias) {
        return new Issue(alias, this);
    }

    @Override
    public Issue as(Table<?> alias) {
        return new Issue(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Issue rename(String name) {
        return new Issue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Issue rename(Name name) {
        return new Issue(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Issue rename(Table<?> name) {
        return new Issue(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
